#!/usr/bin/env python3
"""
Minimal deterministic planner that emits plan.json.

Usage (writes to build/plan.json by default via pipeline.py):
  python scripts/planner_scaffold.py \
    --out build/plan.json \
    --doc-class lix_textbook \
    --title "Basic Skills Review" \
    --author "Student X" \
    --course "MATH 101" \
    --date "\\today" \
    --questions Q1a,Q1b,Q2

Python: 3.11+
"""
from __future__ import annotations

import argparse
import json
from pathlib import Path
from typing import List


def _split_list(csv: str | None) -> List[str]:
    if not csv:
        return []
    return [s.strip() for s in csv.split(",") if s.strip()]


def main() -> int:
    ap = argparse.ArgumentParser()
    ap.add_argument("--out", type=Path, required=True)
    ap.add_argument("--doc-class", default="lix_textbook")
    ap.add_argument("--title", default="Untitled Document")
    ap.add_argument("--author", default="Generated by LaTeXify")
    ap.add_argument("--course", default="")
    ap.add_argument("--date", default=r"\today")
    ap.add_argument("--questions", default="", help="CSV list, e.g. Q1a,Q1b,Q2")
    args = ap.parse_args()

    tasks = [
        {"id": "PREAMBLE", "type": "preamble", "order": 0},
        {"id": "TITLE", "type": "titlepage", "order": 1},
    ]

    for i, q in enumerate(_split_list(args.questions), start=2):
        tasks.append({"id": q, "type": "question", "title": q.replace("_", " "), "order": i})

    plan = {
        "doc_class": args.doc_class,
        "frontmatter": {
            "title": args.title,
            "author": args.author,
            "course": args.course,
            "date": args.date,
        },
        "tasks": tasks,
    }

    args.out.parent.mkdir(parents=True, exist_ok=True)
    args.out.write_text(json.dumps(plan, indent=2), encoding="utf-8")
    print(f"Wrote plan â†’ {args.out}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
