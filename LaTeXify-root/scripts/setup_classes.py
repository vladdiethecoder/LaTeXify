#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Stage LaTeX classes into a project-local TEXMF tree and write a per-project .latexmkrc.

Idempotent: re-runs replace links/files without duplication.
Logs JSONL to build/setup_classes.log.jsonl

Usage:
  python -m scripts.setup_classes \
      --lix_repo kb/online/github/LiX-master \
      --texmf_home kb/classes \
      --out build

Notes:
- latexmk honors $ENV{} set in .latexmkrc; setting TEXMFHOME and extending TEXINPUTS per-project
  is the most portable way to make TeX see our staged classes. :contentReference[oaicite:0]{index=0}
- Kpathsea resolves TEXINPUTS/TEXMFHOME as search path sources. :contentReference[oaicite:1]{index=1}
"""
from __future__ import annotations
import argparse
import json
import os
from pathlib import Path
from datetime import datetime
import shutil

def _now_iso() -> str:
    return datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

def _log(log_path: Path, event: str, **details) -> None:
    log_path.parent.mkdir(parents=True, exist_ok=True)
    rec = {"time": _now_iso(), "event": event}
    rec.update(details)
    with log_path.open("a", encoding="utf-8") as f:
        f.write(json.dumps(rec, ensure_ascii=False) + "\n")

def _safe_link_or_copy(src: Path, dst: Path) -> str:
    dst.parent.mkdir(parents=True, exist_ok=True)
    if dst.exists() or dst.is_symlink():
        try:
            dst.unlink()
        except FileNotFoundError:
            pass
    try:
        os.symlink(src.resolve(), dst)
        return "linked"
    except OSError:
        shutil.copy2(src, dst)
        return "copied"

def stage_lix(lix_repo: Path, texmf_home: Path, log_path: Path) -> list[dict]:
    """Stage lix.sty and any *.cls found under classes/ into TEXMFHOME."""
    staged: list[dict] = []
    # 1) lix.sty at repo root
    lix_sty = lix_repo / "lix.sty"
    if lix_sty.exists():
        dst = texmf_home / "tex" / "latex" / "lix" / "lix.sty"
        action = _safe_link_or_copy(lix_sty, dst)
        staged.append({"src": str(lix_sty), "dst": str(dst), "action": action})
        _log(log_path, "staged", src=str(lix_sty), dst=str(dst), action=action)

    # 2) any classes/**/*.cls (recursive)
    classes_dir = lix_repo / "classes"
    if classes_dir.exists():
        for cls in classes_dir.rglob("*.cls"):
            rel = cls.name  # flatten is fine; class names are unique
            dst = texmf_home / "tex" / "latex" / "lix" / rel
            action = _safe_link_or_copy(cls, dst)
            staged.append({"src": str(cls), "dst": str(dst), "action": action})
            _log(log_path, "staged", src=str(cls), dst=str(dst), action=action)

    return staged

def write_latexmkrc(out_dir: Path, texmf_home: Path, log_path: Path) -> Path:
    """
    Write build/.latexmkrc with per-project TEXMFHOME and TEXINPUTS extension.
    Avoid str.format()/f-string brace parsing by placeholder replacement.
    """
    out_dir.mkdir(parents=True, exist_ok=True)
    rc_path = out_dir / ".latexmkrc"

    # Use a simple token replacement to avoid {{ }} escaping pitfalls. :contentReference[oaicite:2]{index=2}
    tmpl = (
        "# Auto-generated by setup_classes.py\n"
        "# Per-project TEXMFHOME and TEXINPUTS so kpathsea can find staged classes.\n"
        "$ENV{'TEXMFHOME'} = '__TEXMFHOME__' ;\n"
        "$ENV{'TEXINPUTS'} = join(':', ($ENV{'TEXINPUTS'} // ''), '__TEXMFHOME__/tex/latex//') ;\n"
        "# Keep logs readable; project-local setting is supported by latexmk. \n"
        "$ENV{'max_print_line'} = 1000 ;\n"
    )
    texmf_norm = str(texmf_home.resolve()).replace("\\", "/")
    content = tmpl.replace("__TEXMFHOME__", texmf_norm)

    rc_path.write_text(content, encoding="utf-8")
    _log(log_path, "latexmkrc_written", file=str(rc_path), bytes=len(content))
    return rc_path

def main() -> None:
    p = argparse.ArgumentParser()
    p.add_argument("--lix_repo", type=Path, required=True,
                   help="Path to LiX repository root (contains lix.sty and classes/)")
    p.add_argument("--texmf_home", type=Path, default=Path("kb/classes"),
                   help="Project-local TEXMF tree root (default: kb/classes)")
    p.add_argument("--out", type=Path, default=Path("build"),
                   help="Output dir for .latexmkrc and logs (default: build)")
    args = p.parse_args()

    log = args.out / "setup_classes.log.jsonl"
    _log(log, "begin", lix_repo=str(args.lix_repo), texmf_home=str(args.texmf_home))

    staged = stage_lix(args.lix_repo, args.texmf_home, log)
    rc = write_latexmkrc(args.out, args.texmf_home, log)

    print(json.dumps({"ok": True, "staged": staged, "latexmkrc": str(rc),
                      "out_tree": str((args.texmf_home / 'tex' / 'latex' / 'lix').resolve())}))
    _log(log, "end", count=len(staged))

if __name__ == "__main__":
    main()
