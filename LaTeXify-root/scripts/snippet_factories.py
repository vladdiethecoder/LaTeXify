#!/usr/bin/env python3
"""
Render policy-compliant LaTeX snippets for PREAMBLE and TITLE.

- Deterministic, pure stdlib.
- Preamble restricted to the project's allowlist.
- Includes a minimal \\begin{document} by default to prevent "Undefined control
  sequence \\maketitle" when users compile without an explicit main.tex preamble.

Python: 3.11+
"""

from __future__ import annotations
from dataclasses import dataclass
from typing import Dict

ALLOWED_DOC_CLASSES = {"lix_textbook", "lix_article"}
DEFAULT_DOC_CLASS = "lix_textbook"


@dataclass(frozen=True)
class FrontMatter:
    title: str = "Untitled Document"
    author: str = "Generated by LaTeXify"
    course: str = ""
    date: str = r"\today"


def _sanitize_doc_class(doc_class: str | None) -> str:
    dc = (doc_class or "").strip()
    return dc if dc in ALLOWED_DOC_CLASSES else DEFAULT_DOC_CLASS


def _escape_tex(s: str) -> str:
    """Minimal escape for special characters in command arguments."""
    return (
        s.replace("\\", r"\\")
        .replace("{", r"\{")
        .replace("}{", r"}{")
        .replace("}", r"\}")
    )


def render_preamble(doc_class: str | None, include_begin_document: bool = True) -> str:
    """
    Return a minimal allowlisted preamble. By default also adds \\begin{document}
    to ensure downstream snippets compile in isolation (main-safe).
    """
    dc = _sanitize_doc_class(doc_class)
    lines = [
        f"\\documentclass{{{dc}}}",
        "\\usepackage{amsmath,amssymb,amsthm,mathtools}",
        "\\usepackage{thmtools}",
        "\\usepackage{cleveref}",
        "\\usepackage{graphicx,booktabs,caption}",
        "\\usepackage{siunitx}",
        "\\usepackage{microtype}",
        "\\usepackage{enumitem}",
        "\\usepackage{geometry}",
        "\\usepackage{hyperref}",
        r"\sisetup{detect-all=true}",
        r"\hypersetup{hidelinks=true}",
    ]
    if include_begin_document:
        lines.append(r"\begin{document}")
    return "\n".join(lines) + "\n"


def render_titlepage(frontmatter: Dict[str, str] | FrontMatter) -> str:
    """\\title / \\author / \\date + \\maketitle"""
    if isinstance(frontmatter, FrontMatter):
        fm = frontmatter
    else:
        fm = FrontMatter(
            title=(frontmatter or {}).get("title", "Untitled Document") or "Untitled Document",
            author=(frontmatter or {}).get("author", "Generated by LaTeXify") or "Generated by LaTeXify",
            course=(frontmatter or {}).get("course", "") or "",
            date=(frontmatter or {}).get("date", r"\today") or r"\today",
        )
    title = _escape_tex(fm.title)
    author = fm.author if not fm.course else f"{fm.author} \\textit{{({ _escape_tex(fm.course) })}}"
    author = _escape_tex(author)
    date = fm.date
    return "\n".join(
        [
            f"\\title{{{title}}}",
            f"\\author{{{author}}}",
            f"\\date{{{date}}}",
            r"\maketitle",
            "",
        ]
    )
