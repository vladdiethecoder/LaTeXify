#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse, json, sys, os
from pathlib import Path
from typing import Dict, Any

# Local backend
from scripts.synth_backends.llamacpp_backend import LlamaCppBackend

PREAMBLE_PKGS = r"""
% --- AUTOGEN PREAMBLE (do not edit by hand) ---
\usepackage{amsmath,amssymb,amsthm,mathtools}
\usepackage{thmtools}
\usepackage{graphicx,booktabs,caption}
\usepackage{siunitx}
\usepackage{microtype}
\usepackage{enumitem}
\usepackage[margin=1in]{geometry}
\usepackage[hidelinks]{hyperref}
\usepackage{cleveref}
"""

SYSTEM_SYNTH = (
    "You are a LaTeX composition assistant. "
    "Return ONLY valid LaTeX snippet(s) for the section requested, "
    "no preamble, no \\documentclass, no \\begin{document}. "
    "Use clear math and short paragraphs."
)

QUESTION_TEMPLATE = """Write a concise LaTeX answer for the section titled "{qid}".
If there is no source content, output a minimal placeholder paragraph so the PDF compiles.
"""

def load_json(p: Path) -> Dict[str, Any]:
    return json.loads(p.read_text(encoding="utf-8"))

def write_text(p: Path, s: str) -> None:
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(s, encoding="utf-8")

def build_preamble(doc_class: str) -> str:
    return (
        f"\\documentclass{{{doc_class}}}\n"  # class is resolved by TEXINPUTS or stub
        + PREAMBLE_PKGS
        + "\n"
    )

def build_title(front: Dict[str, str]) -> str:
    title  = front.get("title", "Untitled Document")
    author = front.get("author", "Generated by LaTeXify")
    date   = front.get("date", "\\today")
    lines = [
        f"\\title{{{title}}}",
        f"\\author{{{author}}}",
        f"\\date{{{date}}}",
        "\\begin{document}",
        "\\maketitle",
        ""
    ]
    return "\n".join(lines)

def main() -> None:
    ap = argparse.ArgumentParser()
    ap.add_argument("--plan", required=True)
    ap.add_argument("--outdir", required=True)
    ap.add_argument("--mode", default="auto")
    # LLM params
    ap.add_argument("--gguf-model", default="")
    ap.add_argument("--hf-cache", default="")
    ap.add_argument("--n-gpu-layers", type=int, default=-1)
    ap.add_argument("--tensor-split", default=None)
    ap.add_argument("--ctx", type=int, default=4096)
    ap.add_argument("--seed", type=int, default=12345)
    args = ap.parse_args()

    plan = load_json(Path(args.plan))
    outdir = Path(args.outdir)
    outdir.mkdir(parents=True, exist_ok=True)

    # Static tasks first: PREAMBLE, TITLE
    preamble_tex = build_preamble(plan.get("doc_class", "article"))
    write_text(outdir / "PREAMBLE.tex", preamble_tex)

    title_tex = build_title(plan.get("frontmatter", {}))
    write_text(outdir / "TITLE.tex", title_tex)

    # Init backend only if we actually have question tasks
    tasks = plan.get("tasks", [])
    q_tasks = [t for t in tasks if t.get("type") == "question"]

    backend = None
    if q_tasks:
        if not args.gguf_model:
            print("[synth][WARN] No --gguf-model supplied; questions will be minimal placeholders.")
        else:
            print(f"[synth] Loading GGUF: {args.gguf_model}")
            backend = LlamaCppBackend(
                model_path=args.gguf_model,
                n_ctx=args.ctx,
                n_gpu_layers=args.n_gpu_layers,
                tensor_split=args.tensor_split,
                seed=args.seed,
                verbose_llama=True,
                use_mmap=True,
                use_mlock=False,
            )

    for t in tasks:
        ttype = t.get("type")
        tid   = t.get("id", ttype).strip()
        if ttype in ("preamble", "titlepage"):
            # already written
            continue
        if ttype == "question":
            if backend is None:
                latex = (
                    f"\\section*{{{tid}}}\n"
                    "This section is a placeholder. Synthesis will fill this on the next pass.\n"
                )
            else:
                user_prompt = QUESTION_TEMPLATE.format(qid=tid)
                body = backend.generate(
                    system_prompt=SYSTEM_SYNTH,
                    user_prompt=user_prompt,
                    temperature=0.2,
                    top_p=0.95,
                    max_tokens=512,
                )
                latex = f"\\section*{{{tid}}}\n\n{body}\n"
            write_text(outdir / f"{tid}.tex", latex)
        else:
            write_text(outdir / f"{tid}.tex", f"\\section*{{{tid}}}\n\\emph{{Unknown task type.}}\n")

    print(f"Synthesized question snippets â†’ {outdir}")

if __name__ == "__main__":
    main()
